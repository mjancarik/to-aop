// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`aopForMethods class method should call pattern.aroundMethod 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "original": [Function],
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.aroundMethod for super.superMethod 1`] = `
[
  {
    "args": [],
    "context": C {
      "map": Map {},
      "variable": "super method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "method2": [Function],
      "superMethod": [Function],
    },
    "original": [Function],
    "property": "superMethod",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.aroundMethod three times and modify payload 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "original": [Function],
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.arroundMethod for extended class with multiple aspect 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": C {
      "map": Map {},
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "method2": [Function],
      "superMethod": [Function],
    },
    "original": [Function],
    "property": "method2",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "payload": "method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod after class is instanced 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": B {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod after class is instanced 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": B {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "payload": "B method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for extended class 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": B {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for extended class 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": B {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "payload": "B method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for extended class with multiple aspect 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": C {
      "map": Map {},
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "method2": [Function],
      "superMethod": [Function],
    },
    "property": "method2",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for extended class with multiple aspect 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": C {
      "map": Map {},
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "method2": [Function],
      "superMethod": [Function],
    },
    "payload": Map {},
    "property": "method2",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for extended classes with same ancestor 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": B {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for extended classes with same ancestor 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": B {
      "variable": "method",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "payload": "method",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for super.superMethod 1`] = `
[
  {
    "args": [],
    "context": C {
      "map": Map {},
      "variable": "super method",
    },
    "meta": {},
    "object": {
      "__defineGetter__": [Function],
      "__defineSetter__": [Function],
      "__lookupGetter__": [Function],
      "__lookupSetter__": [Function],
      "_privateMethod": [Function],
      "constructor": [Function],
      "hasOwnProperty": [Function],
      "isPrototypeOf": [Function],
      "method": [Function],
      "method2": [Function],
      "propertyIsEnumerable": [Function],
      "superMethod": [Function],
      "toLocaleString": [Function],
      "toString": [Function],
      "valueOf": [Function],
    },
    "property": "superMethod",
    "target": [Function],
  },
]
`;

exports[`aopForMethods class method should call pattern.beforeMethod and pattern.afterMethod for super.superMethod 2`] = `
[
  {
    "args": [],
    "context": C {
      "map": Map {},
      "variable": "super method",
    },
    "meta": {},
    "object": {
      "__defineGetter__": [Function],
      "__defineSetter__": [Function],
      "__lookupGetter__": [Function],
      "__lookupSetter__": [Function],
      "_privateMethod": [Function],
      "constructor": [Function],
      "hasOwnProperty": [Function],
      "isPrototypeOf": [Function],
      "method": [Function],
      "method2": [Function],
      "propertyIsEnumerable": [Function],
      "superMethod": [Function],
      "toLocaleString": [Function],
      "toString": [Function],
      "valueOf": [Function],
    },
    "payload": "super method",
    "property": "superMethod",
    "target": [Function],
  },
]
`;
