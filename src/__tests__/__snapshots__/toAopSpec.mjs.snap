// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createAspect method for class call pattern.beforeMethod and pattern.afterMethod with multiple aspect 1`] = `
[
  {
    "args": [],
    "context": F {
      "_value": {
        "x": [Function],
      },
    },
    "meta": {},
    "object": {
      "getValue": [Function],
    },
    "property": "getValue",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class call pattern.beforeMethod and pattern.afterMethod with multiple aspect 2`] = `
[
  {
    "args": [],
    "context": F {
      "_value": {
        "x": [Function],
      },
    },
    "meta": {},
    "object": {
      "getValue": [Function],
    },
    "payload": {
      "x": [Function],
    },
    "property": "getValue",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "payload": "variableValue",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed and added again to the same class 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed and added again to the same class 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": {
      "_privateMethod": [Function],
      "method": [Function],
      "superMethod": [Function],
    },
    "payload": "variableValue",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for settings constructor: true 1`] = `
[
  {
    "args": [
      1,
    ],
    "context": A {},
    "meta": {},
    "object": [Function],
    "property": "constructor",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for settings constructor: true 2`] = `
[
  {
    "args": [
      1,
    ],
    "context": A {},
    "meta": {},
    "object": [Function],
    "payload": A {
      "variable": 1,
    },
    "property": "constructor",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for settings constructor: true and extended class 1`] = `
[
  {
    "args": [
      1,
    ],
    "context": B {},
    "meta": {},
    "object": [Function],
    "property": "constructor",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should call pattern.beforeMethod and pattern.afterMethod for settings constructor: true and extended class 2`] = `
[
  {
    "args": [
      1,
    ],
    "context": B {},
    "meta": {},
    "object": [Function],
    "payload": B {
      "variable": 1,
    },
    "property": "constructor",
    "target": [Function],
  },
]
`;

exports[`createAspect method for class should not call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed, added and removed again from the same class 1`] = `undefined`;

exports[`createAspect method for class should not call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed, added and removed again from the same class 2`] = `undefined`;

exports[`createAspect method for class should not call pattern.beforeMethod and pattern.afterMethod after unAop method is called 1`] = `undefined`;

exports[`createAspect method for class should not call pattern.beforeMethod and pattern.afterMethod after unAop method is called 2`] = `undefined`;

exports[`createAspect method for instance should call pattern.beforeMethod and pattern.afterMethod 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": A {
      "variable": "variableValue",
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for instance should call pattern.beforeMethod and pattern.afterMethod 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": A {
      "variable": "variableValue",
    },
    "payload": "variableValue",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for instance should call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed and added again to the same method 1`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": A {
      "variable": "variableValue",
    },
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for instance should call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed and added again to the same method 2`] = `
[
  {
    "args": [
      {},
      1,
    ],
    "context": A {
      "variable": "variableValue",
    },
    "meta": {},
    "object": A {
      "variable": "variableValue",
    },
    "payload": "variableValue",
    "property": "method",
    "target": [Function],
  },
]
`;

exports[`createAspect method for instance should not call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed, added and removed again from the same method 1`] = `undefined`;

exports[`createAspect method for instance should not call pattern.beforeMethod and pattern.afterMethod after aop hooks are added, removed, added and removed again from the same method 2`] = `undefined`;

exports[`createAspect method for instance should not call pattern.beforeMethod and pattern.afterMethod after unAop method is called 1`] = `undefined`;

exports[`createAspect method for instance should not call pattern.beforeMethod and pattern.afterMethod after unAop method is called 2`] = `undefined`;
